generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String    
  role         Role      @default(user)
  avatarUrl    String?   
  fullName     String?   
  phone        String?  
  country      String?  
  createdAt    DateTime  @default(now()) 
  subscriptions UserSubscription[]
  favorites     Favorite[]
  reviews       Review[]
  watchHistory  WatchHistory[]
  movies Movie[]   
  @@map("users")
}

enum Role {
  user
  admin
  superadmin
}

model SubscriptionPlan {
  id           String   @id @default(uuid())
  name         String
  price        Decimal  @db.Decimal(10, 2)
  durationDays Int      
  features     Json
  isActive     Boolean  @default(true) 
  userSubscriptions UserSubscription[]
  @@map("subscriptionPlans")
}

model UserSubscription {
  id        String    @id @default(uuid())
  userId    String    
  planId    String    
  startDate DateTime  @default(now()) 
  endDate   DateTime  
  status    SubscriptionStatus @default(pending_payment)
  autoRenew Boolean   @default(false) 
  createdAt DateTime  @default(now()) 
  user User @relation(fields: [userId], references: [id])
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]
  @@map("userSubscriptions")
}

enum SubscriptionStatus {
  active
  expired
  canceled
  pending_payment
}

model Payment {
  id                   String   @id @default(uuid())
  userSubscriptionId   String   
  amount               Decimal  @db.Decimal(10, 2)
  paymentMethod        PaymentMethod 
  paymentDetails       Json     
  status               PaymentStatus
  externalTransactionId String? 
  createdAt            DateTime @default(now()) 
  userSubscription UserSubscription @relation(fields: [userSubscriptionId], references: [id])
  @@map("payments")
}

enum PaymentMethod {
  card
  paypal
  bank_transfer
  crypto
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  movieCategories MovieCategory[]
  @@map("categories")
}

model Movie {
  id               String   @id @default(uuid())
  title            String
  slug             String   @unique
  description      String?
  releaseYear      Int      
  durationMinutes  Int      
  posterUrl        String?  
  rating           Decimal? 
  subscriptionType SubscriptionType @default(free) 
  viewCount        Int      @default(0) 
  createdById      String   
  createdAt        DateTime @default(now()) 
  users User    @relation(fields: [createdById], references: [id]) 
  movieCategories MovieCategory[]
  movieFiles      MovieFile[]
  favorites       Favorite[]
  reviews         Review[]
  watchHistories  WatchHistory[]
  @@map("movies")
}

enum SubscriptionType {
  free
  premium
}

model MovieCategory {
  id         String  @id @default(uuid())
  movieId    String  
  categoryId String  
  movie    Movie    @relation(fields: [movieId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  @@map("movieCategories")
}

model MovieFile {
  id       String  @id @default(uuid())
  movieId  String  
  fileUrl  String  
  quality  VideoQuality
  language String  @default("uz")
  movie Movie @relation(fields: [movieId], references: [id])
  @@map("movieFiles")
}

enum VideoQuality {
  p240
  p360
  p480
  p720
  p1080
  p4K
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   
  movieId   String   
  createdAt DateTime @default(now()) 
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
  @@map("favorites")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   
  movieId   String   
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) 
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
  @@map("reviews")
}

model WatchHistory {
  id                String   @id @default(uuid())
  userId            String   
  movieId           String   
  watchedDuration   Int      
  watchedPercentage Decimal  
  lastWatched       DateTime @default(now()) 
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
  @@map("watchHistories")
}
